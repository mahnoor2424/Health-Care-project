@model IEnumerable<Appointment>

@{
    Layout = "_PublicLayout";
    ViewBag.Title = "My Appointments";

    var ModelPrescriptions = ViewData["Prescriptions"] as List<PrescriptionModel> ?? new List<PrescriptionModel>();
}

<div class="container" style="margin-top:100px;">
    <div class="card" style="margin-top:70px;">
        <div class="card-header bg-primary text-white">
            <h3>My Appointments</h3>
        </div>
        <div class="card-body">
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">
                    @TempData["SuccessMessage"]
                </div>
            }

            <div id="dynamicAlerts"></div>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Doctor</th>
                        <th>Date/Time</th>
                        <th>Problem</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        @foreach (var item in Model)
                        {
                            <tr data-id="@item.Id">
                                <td>@item.Doctor?.FullName</td>
                                <td class="appointment-date">@item.AppointmentDateTime.ToString("g")</td>
                                <td class="problem-description">@item.ProblemDescription?.Truncate(30)</td>
                                <td>
                                    <span class="badge status-badge @GetStatusClass(item.Status)">@item.Status</span>
                                </td>
                                <td>
                                    <div class="btn-group">
                                        @if (item.Status == "Approved")
                                        {
                                            <a href="@Url.Action("Index", "Chat", new { appointmentId = item.Id })"
                                               class="btn btn-sm btn-primary"
                                               target="_blank">
                                                <i class="fas fa-comments"></i> Chat
                                            </a>
                                        }
                                        @if (item.Status == "Pending")
                                        {
                                            <button class="btn btn-sm btn-warning edit-appointment-btn"
                                                    data-bs-toggle="modal"
                                                    data-bs-target="#editAppointmentModal"
                                                    data-id="@item.Id"
                                                    data-date="@item.AppointmentDateTime.ToString("yyyy-MM-ddTHH:mm")"
                                                    data-description="@item.ProblemDescription">
                                                <i class="fas fa-edit"></i> Edit
                                            </button>
                                            <form asp-action="Delete" method="post" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@item.Id" />
                                                <button type="submit" class="btn btn-sm btn-danger"
                                                        onclick="return confirm('Are you sure you want to cancel this appointment?')">
                                                    <i class="fas fa-times"></i> Cancel
                                                </button>
                                            </form>
                                        }
                                        @if (item.Status == "Approved" || item.Status == "Completed")
                                        {
                                            var pres = ModelPrescriptions.FirstOrDefault(p => p.AppointmentId == item.Id);

                                            if (pres != null)
                                            {
                                                <button class="btn btn-sm btn-info view-prescription-btn"
                                                        data-id="@item.Id">
                                                    <i class="fas fa-file-medical"></i> View Prescription
                                                </button>

                                            }
                                            else
                                            {
                                                <span class="text-muted">Prescription pending</span>
                                            }
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center">No appointments found</td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>
    </div>
</div>

<!-- Prescription Modal -->
<div class="modal fade" id="prescriptionModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title">Prescription</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="prescriptionContent">
                <p>Loading...</p>
            </div>
        </div>
    </div>
</div>



<!-- Edit Appointment Modal -->
<div class="modal fade" id="editAppointmentModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Edit Appointment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editAppointmentForm" asp-action="Edit" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" id="editAppointmentId" name="Id" />

                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Date & Time</label>
                        <input type="datetime-local" class="form-control" id="editAppointmentDate"
                               name="AppointmentDateTime" required>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Problem Description</label>
                        <textarea class="form-control" id="editAppointmentDescription"
                                  name="ProblemDescription" rows="3" required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="saveChangesBtn">
                        <span class="submit-text">Save Changes</span>
                        <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
@functions {
    string GetStatusClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning",
            "Approved" => "bg-success",
            "Completed" => "bg-primary",
            "Cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        $(document).ready(function () {

            var now = new Date();
            now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
            document.getElementById('editAppointmentDate').min = now.toISOString().slice(0, 16);

            $('#editAppointmentModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                var modal = $(this);

                modal.find('#editAppointmentId').val(button.data('id'));
                modal.find('#editAppointmentDate').val(button.data('date'));
                modal.find('#editAppointmentDescription').val(button.data('description'));
            });

            $('#editAppointmentForm').on('submit', function (e) {
                e.preventDefault();
                var form = $(this);
                var submitBtn = form.find('#saveChangesBtn');
                var submitText = submitBtn.find('.submit-text');
                var spinner = submitBtn.find('.spinner-border');

                // Show loading state
                submitText.text('Saving...');
                spinner.removeClass('d-none');
                submitBtn.prop('disabled', true);

                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    success: function (response) {
                        if (response.success) {
                            var row = $(`tr[data-id="${response.id}"]`);
                            row.find('.appointment-date').text(response.dateTime);
                            row.find('.problem-description').text(response.description);
                            if (response.status) {
                                var statusBadge = row.find('.status-badge');
                                statusBadge.text(response.status)
                                    .removeClass('bg-warning bg-success bg-primary bg-danger bg-secondary')
                                    .addClass(response.statusClass);
                            }
                            $('#editAppointmentModal').modal('hide');
                            showAlert('Appointment updated successfully!', 'success');
                        } else {
                            var errorMsg = response.message;
                            if (response.errors) {
                                errorMsg += "<br>" + response.errors.join("<br>");
                            }
                            showAlert(errorMsg, 'danger');
                        }
                    },
                    error: function (xhr) {
                        var errorMsg = "An error occurred";
                        try {
                            var jsonResponse = JSON.parse(xhr.responseText);
                            if (jsonResponse && jsonResponse.message) {
                                errorMsg = jsonResponse.message;
                            }
                        } catch (e) {
                            errorMsg = xhr.statusText;
                        }
                        showAlert(errorMsg, 'danger');
                    },
                    complete: function () {
                        submitText.text('Save Changes');
                        spinner.addClass('d-none');
                        submitBtn.prop('disabled', false);
                    }
                });
            });

            // Helper function to show alerts
            function showAlert(message, type) {
                var alertHtml = `
                            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                                ${message}
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        `;
                $('#dynamicAlerts').html(alertHtml);
                setTimeout(() => {
                    $('.alert-dismissible').alert('close');
                }, 5000);
            }
        });

        $(document).on('click', '.view-prescription-btn', function () {
            var appointmentId = $(this).data('id');
            $('#prescriptionContent').html('<p>Loading prescription...</p>');

            $.get('/Prescription/GetPrescriptionPartial', { appointmentId: appointmentId }, function (html) {
                $('#prescriptionContent').html(html);
                $('#prescriptionModal').modal('show');
            }).fail(function () {
                $('#prescriptionContent').html('<p class="text-danger">Failed to load prescription.</p>');
            });
        });
    </script>
}
